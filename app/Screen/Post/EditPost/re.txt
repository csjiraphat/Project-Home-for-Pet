import React, { useState, useEffect } from 'react';
import {
  SafeAreaView,
  ScrollView,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Image,
  Alert,
  StyleSheet,
} from 'react-native';
import { Video, ResizeMode } from 'expo-av';
import * as ImagePicker from 'expo-image-picker';
import AsyncStorage from '@react-native-async-storage/async-storage';
import CustomHeader from '../../../../components/CustomHeader';
import BottomBar from '../../../../components/BottomBar';
import { useNavigation, useRoute } from '@react-navigation/native';
import API from '../../../../android/app/src/config';

type RadioButtonProps = {
  label: string;
  selected: boolean;
  onPress: () => void;
};

const RadioButton: React.FC<RadioButtonProps> = ({ label, selected, onPress }) => (
  <TouchableOpacity style={styles.radioOption} onPress={onPress}>
    <View style={[styles.radioDot, selected && styles.radioDotSelected]} />
    <Text style={styles.radioLabel}>{label}</Text>
  </TouchableOpacity>
);



type RootStackParamList = {
  EditPost: { post: any }; // Replace 'any' with your actual post type if available
};


const EditPostScreen: React.FC = () => {
  const navigation = useNavigation();
  const route = useRoute();
  const { post } = (route.params as { post: any }); // ‡∏£‡∏±‡∏ö post ‡∏à‡∏≤‡∏Å PostDetailScreen

  const [formData, setFormData] = useState({
    title: post.title || '',
    type: post.type || '‡∏´‡∏°‡∏≤',
    breed: post.breed || '',
    gender: post.sex || '‡∏ú‡∏π‡πâ',
    ageYears: post.age?.match(/(\d+)\s?‡∏õ‡∏µ/)?.[1] || '',
    ageMonths: post.age?.match(/(\d+)\s?‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/)?.[1] || '',
    color: post.color || '',
    neutered: post.steriliz || '',
    vaccinated: post.vaccine === '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏â‡∏µ‡∏î' ? '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏â‡∏µ‡∏î' : '‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
    personality: post.personality || '',
    reason: post.reason || '',
    adoptionTerms: post.adoptionTerms || '',
    residence: post.residence || '',
    ageStartYear: post.ageStartYear || '',
    ageStartMonth: post.ageStartMonth || '',
    ageEndYear: post.ageEndYear || '',
    ageEndMonth: post.ageEndMonth || '',
  });

  const uploadMediaIfNeeded = async (assets: Array<{ uri: string; type: string }>) => {
    const uploadedFilenames = [];

    for (const media of assets) {
      if (media.uri.startsWith('http')) {
        // media ‡∏à‡∏≤‡∏Å server ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà)
        uploadedFilenames.push(media.uri.replace(API.UPLOAD_PATH, ''));
        continue;
      }

      const formData = new FormData();
      formData.append('file', {
        uri: media.uri,
        type: media.type === 'video' ? 'video/mp4' : 'image/jpeg',
        name: `media_${Date.now()}.${media.type === 'video' ? 'mp4' : 'jpeg'}`,
      } as any);

      const res = await fetch(`${API.UPLOAD_PATH}upload.php`, {
        method: 'POST',
        body: formData,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      const result = await res.json();
      if (result.status === 'success') {
        uploadedFilenames.push(result.filename); // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥ response: { status: 'success', filename: 'uploads/media_abc123.jpeg' }
      } else {
        Alert.alert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ');
      }
    }

    return uploadedFilenames;
  };

  const prepareImagesForUpload = async () => {
    const uploadedList: string[] = [];

    for (const item of mediaAssets) {
      if (item.uri.startsWith(API.UPLOAD_PATH)) {
        // ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å server ‡πÅ‡∏•‡πâ‡∏ß
        uploadedList.push(item.uri.replace(API.UPLOAD_PATH, ''));
      } else {
        // ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        const formData = new FormData();
        formData.append('file', {
          uri: item.uri,
          name: `media_${Date.now()}.${item.type === 'video' ? 'mp4' : 'jpeg'}`,
          type: item.type === 'video' ? 'video/mp4' : 'image/jpeg',
        } as any);

        const res = await fetch(`${API.UPLOAD_PATH}uploadMedia.php`, {
          method: 'POST',
          headers: {
            'Content-Type': 'multipart/form-data',
          },
          body: formData,
        });

        const result = await res.json();
        if (result.status === 'success') {
          uploadedList.push(result.filename); // ‡πÄ‡∏ä‡πà‡∏ô uploads/media_xxxx.jpeg
        } else {
          Alert.alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', result.message || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        }
      }
    }

    return uploadedList;
  };


  const [mediaAssets, setMediaAssets] = useState(() => {
    try {
      let parsedImages: any[] = [];
      if (Array.isArray(post.image)) {
        parsedImages = post.image;
      } else if (typeof post.image === 'string') {
        parsedImages = JSON.parse(post.image);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô path string ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏° URL ‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      return parsedImages.map((item) => {
        if (typeof item === 'string') {
          const ext = item.toLowerCase().endsWith('.mp4') ? 'video' : 'image';
          return {
            uri: `${API.UPLOAD_PATH}${item.replace(/^uploads\//, '')}`,
            type: ext,
          };
        }
        return item;
      });

    } catch {
      return [];
    }
  });

  const [vaccineList, setVaccineList] = useState(
    post.vaccine && post.vaccine !== '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏â‡∏µ‡∏î' ? post.vaccine.split(',').map((v: string) => v.trim()) : []
  );

  const handleChange = (field: string, value: string) => {
    if (field === 'type') setVaccineList([]);
    setFormData({ ...formData, [field]: value });
  };

  const pickMedia = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') return Alert.alert('‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsMultipleSelection: true,
      quality: 1,
    });

    if (!result.canceled && result.assets) {
      const selected = result.assets.map((a) => ({
        uri: a.uri,
        type: a.type || 'image',
      }));
      setMediaAssets([...mediaAssets, ...selected]);
    }
  };

  const removeMedia = (idx: number) => {
    setMediaAssets(mediaAssets.filter((_: { uri: string; type: string }, i: number) => i !== idx));
  };

  const handleSubmit = async () => {
    const uploadedImages = await prepareImagesForUpload();
    const username = await AsyncStorage.getItem('username');
    console.log('üîÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏û‡∏™‡∏ï‡πå...');

    if (!username) {
      Alert.alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      return;
    }

    const postType = post.postType; // 'fh' ‡∏´‡∏£‡∏∑‡∏≠ 'fp'
    const age =
      postType === 'fh'
        ? `${formData.ageYears ? formData.ageYears + ' ‡∏õ‡∏µ' : ''} ${formData.ageMonths ? formData.ageMonths + ' ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' : ''}`.trim()
        : '';

    const payload = {
      id: post.id,
      title: formData.title,
      type: formData.type,
      breed: formData.breed,
      sex: formData.gender,
      age,
      color: formData.color,
      steriliz: formData.neutered,
      vaccine: formData.vaccinated === '‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÅ‡∏•‡πâ‡∏ß' ? vaccineList.join(', ') : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏â‡∏µ‡∏î',
      personality: formData.personality,
      reason: formData.reason,
      adoptionTerms: formData.adoptionTerms,
      image: uploadedImages,
      residence: formData.residence,
      ageStartYear: formData.ageStartYear,
      ageStartMonth: formData.ageStartMonth,
      ageEndYear: formData.ageEndYear,
      ageEndMonth: formData.ageEndMonth,
      postType,
      user: username, // ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà user ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ PHP ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¢‡∏π‡πà
    };

    // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å endpoint ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏û‡∏™‡∏ï‡πå
    const updateURL =
      postType === 'fh'
        ? `${API.POST_UPDATE_HOME}?id=${post.id}`
        : `${API.POST_UPDATE_PET}?id=${post.id}`;

    let rawText = '';
    let data;

    try {
      const res = await fetch(updateURL, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      rawText = await res.text();
      console.log('üì• Raw response:', rawText);

      data = JSON.parse(rawText);
    } catch (err) {
      console.error('‚ùå Error parsing response:', err);
      Alert.alert('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
      return;
    }

    if (data.status === 'success') {
      Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß');
      navigation.goBack();
    } else {
      Alert.alert('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ');
    }
  };


  const vaccineOptions =
    formData.type === '‡∏´‡∏°‡∏≤'
      ? ['‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡πâ‡∏´‡∏±‡∏î', '‡πÇ‡∏£‡∏Ñ‡∏•‡∏≥‡πÑ‡∏™‡πâ‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö', '‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö', '‡πÇ‡∏£‡∏Ñ‡∏û‡∏≤‡∏£‡πå‡πÇ‡∏ß‡πÑ‡∏ß‡∏£‡∏±‡∏™', '‡πÇ‡∏£‡∏Ñ‡∏û‡∏¥‡∏©‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ö‡πâ‡∏≤']
      : ['‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡πâ‡∏´‡∏±‡∏î', '‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏ô', '‡πÇ‡∏£‡∏Ñ‡∏•‡∏¥‡∏ß‡∏Ñ‡∏µ‡πÄ‡∏°‡∏µ‡∏¢', '‡πÇ‡∏£‡∏Ñ‡∏û‡∏¥‡∏©‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ö‡πâ‡∏≤'];

  return (
    <SafeAreaView style={styles.container}>
      <CustomHeader title="" />
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <Text style={styles.label}>‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå</Text>
        <TextInput style={styles.input} value={formData.title} onChangeText={(t) => handleChange('title', t)} />

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ï‡∏≤‡∏° postType */}
        {post.postType === 'fh' ? (
          <>
            <Text style={styles.label}>‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</Text>
            <View style={styles.radioGroup}>
              {['‡∏´‡∏°‡∏≤', '‡πÅ‡∏°‡∏ß'].map((option) => (
                <RadioButton key={option} label={option} selected={formData.type === option} onPress={() => handleChange('type', option)} />
              ))}
            </View>

            <Text style={styles.label}>‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå</Text>
            <TextInput style={styles.input} value={formData.breed} onChangeText={(text) => handleChange('breed', text)} />

            <Text style={styles.label}>‡πÄ‡∏û‡∏®</Text>
            <View style={styles.radioGroup}>
              {['‡∏ú‡∏π‡πâ', '‡πÄ‡∏°‡∏µ‡∏¢'].map((option) => (
                <RadioButton key={option} label={option} selected={formData.gender === option} onPress={() => handleChange('gender', option)} />
              ))}
            </View>

            <Text style={styles.label}>‡∏≠‡∏≤‡∏¢‡∏∏</Text>
            <View style={{ flexDirection: 'row', gap: 12 }}>
              <TextInput style={[styles.input, { flex: 1 }]} placeholder="‡∏õ‡∏µ" value={formData.ageYears} keyboardType="numeric" onChangeText={(t) => handleChange('ageYears', t)} />
              <TextInput style={[styles.input, { flex: 1 }]} placeholder="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" value={formData.ageMonths} keyboardType="numeric" onChangeText={(t) => handleChange('ageMonths', t)} />
            </View>

            <Text style={styles.label}>‡∏™‡∏µ</Text>
            <TextInput style={styles.input} value={formData.color} onChangeText={(t) => handleChange('color', t)} />

            <Text style={styles.label}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏´‡∏°‡∏±‡∏ô</Text>
            <View style={styles.radioGroup}>
              {['‡∏ó‡∏≥‡∏´‡∏°‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥'].map((option) => (
                <RadioButton key={option} label={option} selected={formData.neutered === option} onPress={() => handleChange('neutered', option)} />
              ))}
            </View>

            <Text style={styles.label}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô</Text>
            <View style={styles.radioGroup}>
              {['‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏â‡∏µ‡∏î'].map((option) => (
                <RadioButton key={option} label={option} selected={formData.vaccinated === option} onPress={() => {
                  handleChange('vaccinated', option);
                  if (option === '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏â‡∏µ‡∏î') setVaccineList([]);
                }} />
              ))}
            </View>

            {formData.vaccinated === '‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÅ‡∏•‡πâ‡∏ß' && vaccineOptions.map((vaccine) => (
              <TouchableOpacity key={vaccine} style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 6 }} onPress={() => {
                setVaccineList((prev: string[]) => prev.includes(vaccine) ? prev.filter(v => v !== vaccine) : [...prev, vaccine]);
              }}>
                <View style={[styles.checkbox, vaccineList.includes(vaccine) && styles.checkboxSelected]} />
                <Text style={{ marginLeft: 8 }}>{vaccine}</Text>
              </TouchableOpacity>
            ))}

            <Text style={styles.label}>‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°</Text>
            <TextInput style={styles.input} value={formData.personality} onChangeText={(t) => handleChange('personality', t)} />

            <Text style={styles.label}>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô</Text>
            <TextInput style={styles.input} value={formData.reason} onChangeText={(t) => handleChange('reason', t)} />

            <Text style={styles.label}>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</Text>
            <TextInput style={styles.input} value={formData.adoptionTerms} onChangeText={(t) => handleChange('adoptionTerms', t)} />
          </>
        ) : (
          <>
            <Text style={styles.label}>‡∏ä‡∏ô‡∏¥‡∏î</Text>
            <TextInput style={styles.input} value={formData.type} onChangeText={(t) => handleChange('type', t)} />

            <Text style={styles.label}>‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)</Text>
            <View style={{ flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', gap: 6 }}>
              <TextInput
                style={[styles.inputInline, { width: 50 }]}
                keyboardType="numeric"
                placeholder="‡∏õ‡∏µ"
                value={formData.ageStartYear}
                onChangeText={(t) => handleChange('ageStartYear', t)}
              />
              <Text style={styles.inlineText}>‡∏õ‡∏µ</Text>

              <TextInput
                style={[styles.inputInline, { width: 50 }]}
                keyboardType="numeric"
                placeholder="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                value={formData.ageStartMonth}
                onChangeText={(t) => handleChange('ageStartMonth', t)}
              />
              <Text style={styles.inlineText}>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</Text>
              <Text style={styles.inlineText}>  -  </Text>
              <TextInput
                style={[styles.inputInline, { width: 50 }]}
                keyboardType="numeric"
                placeholder="‡∏õ‡∏µ"
                value={formData.ageEndYear}
                onChangeText={(t) => handleChange('ageEndYear', t)}
              />
              <Text style={styles.inlineText}>‡∏õ‡∏µ</Text>

              <TextInput
                style={[styles.inputInline, { width: 50 }]}
                keyboardType="numeric"
                placeholder="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                value={formData.ageEndMonth}
                onChangeText={(t) => handleChange('ageEndMonth', t)}
              />
              <Text style={styles.inlineText}>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</Text>
            </View>



            <Text style={styles.label}>‡∏™‡∏µ</Text>
            <TextInput style={styles.input} value={formData.color} onChangeText={(t) => handleChange('color', t)} />

            <Text style={styles.label}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏´‡∏°‡∏±‡∏ô</Text>
            <TextInput style={styles.input} value={formData.neutered} onChangeText={(t) => handleChange('neutered', t)} />

            <Text style={styles.label}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô</Text>
            <TextInput style={styles.input} value={formData.vaccinated} onChangeText={(t) => handleChange('vaccinated', t)} />

            <Text style={styles.label}>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢</Text>
            <TextInput style={styles.input} value={formData.residence} onChangeText={(t) => handleChange('residence', t)} />
          </>
        )}

        {post.postType === 'fh' && (
          <>
            <Text style={styles.label}>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</Text>
            <TouchableOpacity style={styles.uploadButton} onPress={pickMedia}>
              <Text style={styles.uploadButtonText}>+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</Text>
            </TouchableOpacity>
            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={{ marginTop: 12 }}>
              {mediaAssets.map((media, idx) => {
                // ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå debug ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
                console.log('media:', media);

                return (
                  <View key={idx} style={{ marginRight: 12, position: 'relative' }}>
                    <TouchableOpacity onPress={() => removeMedia(idx)} style={styles.deleteBadge}>
                      <Text style={{ color: '#fff' }}>√ó</Text>
                    </TouchableOpacity>

                    {media.uri ? (
                      media.type === 'video' ? (
                        <Video
                          source={{ uri: media.uri }}
                          style={{ width: 120, height: 120, backgroundColor: '#000' }}
                          useNativeControls
                          resizeMode={ResizeMode.COVER}
                          isLooping
                        />
                      ) : (
                        <Image
                          source={{ uri: media.uri }}
                          style={{
                            width: 120,
                            height: 120,
                            borderRadius: 8,
                            backgroundColor: '#eee', // fallback ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏ß‡∏•‡πâ‡∏ß‡∏ô
                          }}
                          resizeMode="cover"
                          onError={(e) => console.warn('Image Load Error:', e.nativeEvent.error)}
                        />
                      )
                    ) : (
                      <Text>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</Text>
                    )}
                  </View>
                );
              })}
            </ScrollView>

          </>
        )}


        <TouchableOpacity style={styles.submitButton} onPress={handleSubmit}>
          <Text style={styles.submitButtonText}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Text>
        </TouchableOpacity>
      </ScrollView>
      <BottomBar />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  scrollContent: { padding: 16, paddingBottom: 100, backgroundColor: '#fff' },
  label: { marginTop: 12, fontWeight: 'bold', fontSize: 14, color: '#333' },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    paddingHorizontal: 10,
    paddingVertical: 8,
    borderRadius: 8,
    marginTop: 4,
    backgroundColor: '#f9f9f9',
  },
  radioGroup: { flexDirection: 'row', marginTop: 8, flexWrap: 'wrap' },
  radioOption: { flexDirection: 'row', alignItems: 'center', marginRight: 16, marginTop: 6 },
  radioDot: {
    width: 16,
    height: 16,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: '#555',
    marginRight: 6,
    backgroundColor: '#fff',
  },
  radioDotSelected: {
    backgroundColor: '#4ade80',
    borderColor: '#4ade80',
  },
  radioLabel: { fontSize: 14, color: '#333' },
  checkbox: {
    width: 18,
    height: 18,
    borderWidth: 2,
    borderColor: '#999',
    borderRadius: 4,
    backgroundColor: '#fff',
  },
  checkboxSelected: {
    backgroundColor: '#4ade80',
    borderColor: '#4ade80',
  },
  uploadButton: {
    marginTop: 12,
    padding: 12,
    backgroundColor: '#dbeafe',
    borderRadius: 8,
    alignItems: 'center',
  },
  uploadButtonText: { color: '#2563eb', fontWeight: 'bold' },
  submitButton: {
    marginTop: 20,
    backgroundColor: '#4ade80',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  submitButtonText: { color: '#fff', fontWeight: 'bold', fontSize: 16 },
  deleteBadge: {
    position: 'absolute',
    top: -6,
    right: -6,
    backgroundColor: 'red',
    borderRadius: 12,
    padding: 4,
    zIndex: 1,
  },
  inputInline: {
    borderWidth: 1,
    borderColor: '#ccc',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
    fontSize: 14,
    textAlign: 'center',
  },

  inlineText: {
    fontSize: 14,
    color: '#333',
  },


});

export default EditPostScreen;
